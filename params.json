{"name":"Mongohq-api-laravel4","tagline":"Laravel 4 Integration for MongoHQ API","body":"##Laravel 4 Integration for MongoHQ API\r\n\r\n\r\n- [Installation](#install)\r\n- [Usage](#usage)\r\n- [Database](#database)\r\n  - [List Databases](#list-db)\r\n  - [Create Database](#create-db)\r\n  - [Get DB Info](#info-db)\r\n  - [Drop DB](#drop-db)\r\n- [Collections](#collections)\r\n  - [List Collections](#list-coll)\r\n  - [Create Collection](#create-coll)\r\n  - [Collection Stats](#stats-coll)\r\n  - [Rename Collection](#rename-coll)\r\n  - [Drop Collection](#drop-coll)\r\n- [Indexes](#indexes)\r\n  - [List Indexes](#list-idx)\r\n  - [Create Index](#create-idx)\r\n  - [Drop Index](#drop-idx)\r\n  - [Drop All Collection Indexes](#drop-idx-all)\r\n\r\n<a name=\"install\"></a>\r\n###Installation\r\nAdd abishekrsrikaanth/mongohq-api as a requirement to composer.json:\r\n```\r\n{\r\n    ...\r\n    \"require\": {\r\n        ...\r\n        \"abishekrsrikaanth/mongohq-api\": \"dev-master\"\r\n        ...\r\n    },\r\n}\r\n```\r\nUpdate composer:\r\n```\r\n$ php composer.phar update\r\n```\r\nAdd the provider to your app/config/app.php:\r\n```\r\n'providers' => array(\r\n    ...\r\n    'Abishekrsrikaanth\\MongohqApi\\MongohqApiServiceProvider',\r\n),\r\n```\r\nand the Facade info on app/config/app.php\r\n```\r\n'aliases'   => array(\r\n    ...\r\n    'MongoHQ'     => 'Abishekrsrikaanth\\MongohqApi\\Facades\\MongohqApi',\r\n),\r\n```\r\nPublish the Configuration and setup the API Key<a name=\"config-publish\"></a>\r\n```\r\nphp artisan config:publish abishekrsrikaanth/mongohq-api\r\n```\r\n---------------------\r\n<a name=\"usage\"></a>\r\n###Usage\r\n\r\n***Initializing the database Object***\r\n\r\nIf the MongoHQ API Key is configured on the [config file published](#config-publish)\r\n```\r\n$db = MongoHQ::Database(); \r\n```\r\n\r\nTo pass the MongoHQ API Key dynamically\r\n\r\n```\r\n$db = MongoHQ::Database('API_KEY_GOES_HERE')\r\n```\r\n\r\n***Initializing the Collections Object***\r\n\r\nIf the MongoHQ API Key is configured on the [config file published](#config-publish)\r\n```\r\n$coll = MongoHQ::Collections(); \r\n```\r\n\r\nTo pass the MongoHQ API Key dynamically\r\n\r\n```\r\n$coll = MongoHQ::Collections('API_KEY_GOES_HERE')\r\n```\r\n\r\n***Initializing the Indexes Object***\r\n\r\nIf the MongoHQ API Key is configured on the [config file published](#config-publish)\r\n```\r\n$idx = MongoHQ::Indexes(); \r\n```\r\n\r\nTo pass the MongoHQ API Key dynamically\r\n\r\n```\r\n$idx = MongoHQ::Indexes('API_KEY_GOES_HERE')\r\n```\r\n-------------------\r\n<a name=\"database\"></a>\r\n###Database\r\n\r\n<a name=\"list-db\"></a>\r\n####Getting the list of databases\r\n```\r\n$db = MongoHQ::Database(); //Initializes the Database Class\r\n$db->get();\r\n```\r\n\r\n<a name=\"create-db\"></a>\r\n####Create Database\r\n```\r\n$db = MongoHQ::Database();\r\n$db->create('DB_NAME','PLAN_TO_USE');\r\n```\r\n\r\n<a name=\"info-db\"></a>\r\n####Get DB Info\r\n```\r\n$db = MongoHQ::Database();\r\n$db->info('DB_NAME_TO_GET_THE_INFO');\r\n```\r\n\r\n<a name=\"drop-db\"></a>\r\n####Drop a Database\r\n```\r\n$db = MongoHQ::Database();\r\n$db->drop('DB_NAME_TO_GET_THE_INFO');\r\n```\r\n-------------------\r\n<a name=\"collections\"></a>\r\n###Collections\r\n\r\n<a name=\"list-coll\"></a>\r\n####Getting the list of collections\r\n```\r\n$coll = MongoHQ::Collections(); //Initializes the Database Class\r\n$coll->get('DB_NAME_TO_GET_THE_LIST_COLLECTIONS');\r\n```\r\n\r\n<a name=\"create-coll\"></a>\r\n####Create a Collection\r\n```\r\n$coll = MongoHQ::Collections();\r\n$coll->create('DB_NAME_TO_CREATE_THE_COLLECTION_ON','COLLECTION_NAME');\r\n```\r\n\r\n<a name=\"stats-coll\"></a>\r\n####Getting the Collection Stats\r\n```\r\n$coll = MongoHQ::Collections();\r\n$coll->stats('DB_NAME','COLLECTION_NAME_TO_GET_STATS');\r\n```\r\n\r\n<a name=\"rename-coll\"></a>\r\n####Rename Collection\r\n```\r\n$coll = MongoHQ::Collections();\r\n$coll->rename('DB_NAME','OLD_COLLECTION_NAME','NEW_COLLECTION_NAME');\r\n```\r\n\r\n<a name=\"drop-coll\"></a>\r\n####Drop a Collection from a Database\r\n```\r\n$coll = MongoHQ::Collections();\r\n$coll->drop('DB_NAME','COLLECTION_NAME_TO_DROP');\r\n```\r\n-----------------\r\n<a name=\"indexes\"></a>\r\n###Indexes\r\n\r\n<a name=\"list-idx\"></a>\r\n####Getting the list of indexes on a Collection\r\n```\r\n$idx = MongoHQ::Indexes(); //Initializes the Database Class\r\n$idx->get('DB_NAME','COLLECTION_NAME');\r\n```\r\n\r\n<a name=\"create-idx\"></a>\r\n####Create an Index on a Collection\r\n```\r\n$idx = MongoHQ::Indexes();\r\n$idx->create('DB_NAME','COLLECTION_NAME',\r\n    array('name'=>'1'),  //IDX_SPEC - The index spec to be created. (i.e. {name:1})</dd>\r\n    array(\r\n        'background' => true, //Indicate that the index should be built in the background. (defaults to true)\r\n        'unique'     => false, //If true, this index will enforce a uniqueness constraint. (defaults to false)\r\n        'drop_dups'  => false, //If creating a unique index on a collection with pre-existing records, \r\n                             //this option will keep the first document the database \r\n                             //indexes and drop all subsequent with duplicate values. (defaults to false)\r\n        'min'        => null, //Specify the minimum longitude and latitude for a geo index. (defaults to null)\r\n        'max'        => null //Specify the maximum longitude and latitude for a geo index. (defaults to null)\r\n        )\r\n    );\r\n\r\n```\r\n<a name=\"drop-idx\"></a>\r\n####Drop an Index on a Collection\r\n```\r\n$idx = MongoHQ::Indexes();\r\n$idx->drop('DB_NAME','COLLECTION_NAME','IDX_NAME');\r\n```\r\n<a name=\"drop-idx-all\"></a>\r\n####Drop all Indexes on the Collection\r\n```\r\n$idx = MongoHQ::Indexes();\r\n$idx->dropAll('DB_NAME','COLLECTION_NAME');\r\n```\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/abishekrsrikaanth/mongohq-api-laravel4/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")","google":"UA-42908632-2","note":"Don't delete this file! It's used internally to help with page regeneration."}